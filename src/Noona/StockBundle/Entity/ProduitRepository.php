<?php

namespace Noona\StockBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
    public function getProduits($page,$nbrParPage = 10)
    {
        $qb = $this->createQueryBuilder('p')
                      ->join('p.image','i')
                      ->addSelect('i')
                      ->where('p.isActif = 1')
                      ->orderBy('p.reference','ASC')
                      ->setFirstResult(($page-1)*$nbrParPage)
                      ->setMaxResults($nbrParPage);


        return new Paginator($qb);
    }

    public function getTotalIn($produit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(rp.quantite)')
            ->from('NoonaStockBundle:ReassortProduit', 'rp')
            ->where('rp.produit = :produit')
            ->setParameter('produit', $produit);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getTotalOut($produit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(vp.quantite)')
            ->from('NoonaStockBundle:VenteProduit', 'vp')
            ->where('vp.produit = :produit')
            ->setParameter('produit', $produit);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getRevenu($produit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(vp.coutTotal)')
            ->from('NoonaStockBundle:VenteProduit', 'vp')
            ->where('vp.produit = :produit')
            ->setParameter('produit', $produit);

        return $qb->getQuery()->getSingleScalarResult();
    }


    public function getCout($produit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(rp.coutTotal)')
            ->from('NoonaStockBundle:ReassortProduit', 'rp')
            ->where('rp.produit = :produit')
            ->setParameter('produit', $produit);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getCoutGlobal()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(r.totalPrice)')
            ->from('NoonaStockBundle:Reassort', 'r');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getRevenuGlobal()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('SUM(v.totalPrice)')
            ->from('NoonaStockBundle:Vente', 'v');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function searchProduit($chaine)
    {
        $query = $this->createQueryBuilder('p')
            ->join('p.image','i')
            ->addSelect('i')
            ->where('p.isActif = 1')
            ->andWhere('p.reference LIKE :chaine')
            ->orderBy('p.reference','ASC')
            ->setParameter('chaine','%'.$chaine.'%')
            ->getQuery();
        return $query->getResult();

    }

    public function getReferenceProduits()
    {
        $query = $this->createQueryBuilder('p')
                    ->select('p.reference')
                    ->where('p.isActif = 1')
                    ->orderBy('p.reference', 'ASC')
                    ->getQuery();

        return $query->getArrayResult();
    }



}
